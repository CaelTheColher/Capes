buildscript {
    dependencies {
        classpath("org.kohsuke:github-api:1.313")
    }
}

plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
    id "org.jetbrains.kotlin.jvm"
    id "org.ajoberstar.grgit"
    id "com.matthewprenger.cursegradle"
    id "com.modrinth.minotaur"
}

architectury {
    platformSetupLoomIde()
    neoForge {
        platformPackage = "forge"
    }
}

loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentNeoForge.extendsFrom common
}

repositories {
    maven {
        name = 'Kotlin for Forge'
        url = 'https://thedarkcolour.github.io/KotlinForForge/'
        content { includeGroup "thedarkcolour" }
    }
    maven {
        url 'https://maven.neoforged.net/releases/'
    }
}

dependencies {
    neoForge "net.neoforged:neoforge:${forge_version}"

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionNeoForge")) { transitive false }

    implementation "thedarkcolour:kotlinforforge-neoforge:${forge_kotlin_version}"

    modImplementation "com.ptsmods:devlogin:3.5"
}

processResources {
    inputs.property "version", project.version

    filesMatching("META-INF/mods.toml") {
        expand "version": project.version
    }
}

shadowJar {
    exclude "fabric.mod.json"
    exclude "architectury.common.json"

    mergeServiceFiles()

    configurations = [project.configurations.shadowCommon]
    archiveClassifier.set "dev-shadow"
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    archiveClassifier.set "forge"

    from rootProject.file("LICENSE")
}

jar {
    archiveClassifier.set "dev"
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenForge(MavenPublication) {
            artifactId = rootProject.archives_base_name + "-" + project.name
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
    }
}

def DISPLAY_NAME = "[Forge ${minecraft_version}] Capes ${mod_version.split('\\+')[0]}"

static def getChangeLog() {
    return "A changelog can be found at https://github.com/CaelTheColher/Capes"
}

curseforge {
    String token = System.getenv("CURSEFORGE_API_KEY")
    apiKey = token == null || token.isEmpty() ? "unset" : token
    project {
        id = curseforge_id
        changelog = getChangeLog()
        releaseType = "beta"
        addGameVersion("NeoForge")
        addGameVersion(minecraft_version)
        relations {
            requiredDependency("kotlin-for-forge")
        }
        mainArtifact(tasks.remapJar.archiveFile.get().getAsFile()) {
            displayName = DISPLAY_NAME
        }
        afterEvaluate {
            uploadTask.dependsOn(remapJar)
        }
    }
    curseGradleOptions.forgeGradleIntegration = false
}

modrinth {
    token = System.getenv("MODRINTH_TOKEN")
    projectId = modrinth_id
    versionNumber = mod_version
    versionName = DISPLAY_NAME
    uploadFile = remapJar
    gameVersions = [minecraft_version]
    loaders = ['neoforge']
    versionType = "release"
    changelog = getChangeLog()
    dependencies {
        required.project("kotlin-for-forge")
    }
}

def getBranch() {
    def env = System.getenv()
    if (env.GITHUB_REF) {
        def branch = env.GITHUB_REF
        return branch.substring(branch.lastIndexOf("/") + 1)
    }

    if (grgit == null) {
        return "unknown"
    }

    def branch = grgit.branch.current().name
    return branch.substring(branch.lastIndexOf("/") + 1)
}

import org.kohsuke.github.GHReleaseBuilder
import org.kohsuke.github.GitHub

tasks.register('github') {
    dependsOn remapJar
    def env = System.getenv()
    onlyIf {
        env.GITHUB_TOKEN
    }

    doLast {
        def github = GitHub.connectUsingOAuth(env.GITHUB_TOKEN as String)
        def repository = github.getRepository(env.GITHUB_REPOSITORY)

        def releaseBuilder = new GHReleaseBuilder(repository, "forge-" + version as String)
        releaseBuilder.name(DISPLAY_NAME)
        releaseBuilder.body(getChangeLog())
        releaseBuilder.commitish(getBranch())

        def ghRelease = releaseBuilder.create()
        ghRelease.uploadAsset(tasks.remapJar.archiveFile.get().getAsFile(), "application/java-archive")
    }
}

tasks.named("curseforge").get().dependsOn tasks.named("remapJar").get()
tasks.named("modrinth").get().dependsOn tasks.named("remapJar").get()

rootProject.tasks.named("forgePublish").get().dependsOn tasks.named("curseforge").get()
rootProject.tasks.named("forgePublish").get().dependsOn tasks.named("modrinth").get()
rootProject.tasks.named("forgePublish").get().dependsOn tasks.named("github").get()